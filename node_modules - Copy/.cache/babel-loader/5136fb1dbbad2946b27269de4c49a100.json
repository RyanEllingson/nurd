{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/16123/Desktop/github/repos/nurd/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer } from \"react\";\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputUser = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        value: action.val,\n        inputIsValid: validate(action.val, action.validators)\n      };\n\n    case \"TOUCH\":\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputUser, {\n    value: \"\",\n    isTouched: false,\n    inputIsValid: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element = props.element === \"input\" ? React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }) : React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3 // onChange={changeHandler}\n    ,\n    onChange: props.onChange,\n    onBlur: touchHandler // value={inputState.value}\n    ,\n    value: props.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    className: `form-control ${!inputState.inputIsValid && inputState.isTouched && \"form-control--invalid\"}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: props.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, props.label), element, !inputState.inputIsValid && inputState.isTouched && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/mnt/c/Users/16123/Desktop/github/repos/nurd/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","validate","inputUser","state","action","type","value","val","inputIsValid","validators","isTouched","Input","props","inputState","dispatch","changeHandler","event","target","touchHandler","element","id","placeholder","rows","onChange","label","errorText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAO,aAAP;;AAEA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,KAAK,EAAEF,MAAM,CAACG,GAFT;AAGLC,QAAAA,YAAY,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAaH,MAAM,CAACK,UAApB;AAHjB,OAAP;;AAKF,SAAK,OAAL;AAAc;AACZ,eAAO,EACL,GAAGN,KADE;AAELO,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AACD;AACE,aAAOP,KAAP;AAdJ;AAgBD,CAjBD;;AAmBA,MAAMQ,KAAK,GAAGC,KAAK,IAAI;AACrB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBd,UAAU,CAACE,SAAD,EAAY;AACnDI,IAAAA,KAAK,EAAE,EAD4C;AAEnDI,IAAAA,SAAS,EAAE,KAFwC;AAGnDF,IAAAA,YAAY,EAAE;AAHqC,GAAZ,CAAzC;;AAMA,QAAMO,aAAa,GAAGC,KAAK,IAAI;AAC7BF,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,QADC;AAEPE,MAAAA,GAAG,EAAES,KAAK,CAACC,MAAN,CAAaX,KAFX;AAGPG,MAAAA,UAAU,EAAEG,KAAK,CAACH;AAHX,KAAD,CAAR;AAKD,GAND;;AAQA,QAAMS,YAAY,GAAG,MAAM;AACzBJ,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GAJD;;AAMA,QAAMc,OAAO,GACXP,KAAK,CAACO,OAAN,KAAkB,OAAlB,GACE;AACE,IAAA,EAAE,EAAEP,KAAK,CAACQ,EADZ;AAEE,IAAA,IAAI,EAAER,KAAK,CAACP,IAFd;AAGE,IAAA,WAAW,EAAEO,KAAK,CAACS,WAHrB;AAIE,IAAA,QAAQ,EAAEN,aAJZ;AAKE,IAAA,MAAM,EAAEG,YALV;AAME,IAAA,KAAK,EAAEL,UAAU,CAACP,KANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAUE;AACE,IAAA,EAAE,EAAEM,KAAK,CAACQ,EADZ;AAEE,IAAA,IAAI,EAAER,KAAK,CAACU,IAAN,IAAc,CAFtB,CAGE;AAHF;AAIE,IAAA,QAAQ,EAAEV,KAAK,CAACW,QAJlB;AAKE,IAAA,MAAM,EAAEL,YALV,CAME;AANF;AAOE,IAAA,KAAK,EAAEN,KAAK,CAACN,KAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ;AAsBA,SACE;AACE,IAAA,SAAS,EAAG,gBAAe,CAACO,UAAU,CAACL,YAAZ,IACzBK,UAAU,CAACH,SADc,IAEzB,uBAAwB,EAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE;AAAO,IAAA,OAAO,EAAEE,KAAK,CAACQ,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BR,KAAK,CAACY,KAAjC,CAJF,EAKGL,OALH,EAMG,CAACN,UAAU,CAACL,YAAZ,IAA4BK,UAAU,CAACH,SAAvC,IACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,KAAK,CAACa,SAAV,CAPJ,CADF;AAYD,CAvDD;;AAyDA,eAAed,KAAf","sourcesContent":["import React, { useReducer } from \"react\";\n\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputUser = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        inputIsValid: validate(action.val, action.validators)\n      };\n    case \"TOUCH\": {\n      return {\n        ...state,\n        isTouched: true\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputUser, {\n    value: \"\",\n    isTouched: false,\n    inputIsValid: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        // onChange={changeHandler}\n        onChange={props.onChange}\n        onBlur={touchHandler}\n        // value={inputState.value}\n        value={props.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.inputIsValid &&\n        inputState.isTouched &&\n        \"form-control--invalid\"}`}>\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.inputIsValid && inputState.isTouched && (\n        <p>{props.errorText}</p>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}